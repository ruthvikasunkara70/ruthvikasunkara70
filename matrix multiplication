#include <stdio.h>

int main()
{
    int a[10][10], b[10][10], result[10][10];
    int i, j, k, row1, col1, row2, col2;

    printf("Enter rows and columns for the first matrix: ");
    scanf("%d %d", &row1, &col1);

    printf("Enter rows and columns for the second matrix: ");
    scanf("%d %d", &row2, &col2);

    // If the number of columns in the first matrix is not equal to the number of rows in the second matrix, multiplication cannot be performed
    if (col1 != row2)
    {
        printf("Error! Number of columns in the first matrix is not equal to the number of rows in the second matrix.");
    }
    else
    {
        // Input elements of the first matrix
        printf("\nEnter elements of matrix 1:\n");
        for (i = 0; i < row1; ++i)
        {
            for (j = 0; j < col1; ++j)
            {
                printf("Enter element a%d%d: ", i + 1, j + 1);
                scanf("%d", &a[i][j]);
            }
        }

        // Input elements of the second matrix
        printf("\nEnter elements of matrix 2:\n");
        for (i = 0; i < row2; ++i)
        {
            for (j = 0; j < col2; ++j)
            {
                printf("Enter element b%d%d: ", i + 1, j + 1);
                scanf("%d", &b[i][j]);
            }
        }

        // Initialize elements of result matrix to 0
        for (i = 0; i < row1; ++i)
        {
            for (j = 0; j < col2; ++j)
            {
                result[i][j] = 0;
            }
        }

        // Multiply the two matrices
        for (i = 0; i < row1; ++i)
        {
            for (j = 0; j < col2; ++j)
            {
                for (k = 0; k < col1; ++k)
                {
                    result[i][j] += a[i][k] * b[k][j];
                }
            }
        }

        // Display the result
        printf("\nOutput Matrix:\n");
        for (i = 0; i < row1; ++i)
        {
            for (j = 0; j < col2; ++j)
            {
                printf("%d  ", result[i][j]);
                if (j == col2 - 1)
                    printf("\n");
            }
        }
    }

    return 0;
}
